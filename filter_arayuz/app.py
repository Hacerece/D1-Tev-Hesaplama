import streamlit as st
import pandas as pd
import re
import numpy as np
from io import BytesIO
from pandas import DataFrame
from openpyxl.utils import column_index_from_string

# Sabitler (neden: magic string ve kolon adlarÄ±nÄ± tek yerde toplamak)
COL_MADDE = "Madde AdÄ±"
COL_PARAM = "Parametreler"
ROW_TOPLAM_MAMUL = "Toplam Mamul KullanÄ±mÄ±"
ROW_TOPLAM_BIRIM = "Toplam Birim KullanÄ±m"
ROW_FIRE = "Fire"
ROW_TOPLAM_MIKTAR = "Toplam Miktar"
ROW_KULLANILAN_URUN = "KullanÄ±lan ÃœrÃ¼n"
ROW_2BR_BIRIM = "2.Br Birim KullanÄ±m"
COL_GERCEK_ITH_MIK = "GerÃ§ekleÅŸen Ä°thalat MiktarÄ±"
COL_FARK = "Fark"
COL_TEV = "TEV Durumu"
COL_TMK_TOPLAM = "Toplam Mamul KullanÄ±mÄ± Toplam"

ZORUNLU_SUTUNLAR_ITHALAT = ["Ã–zel Durum", "GÃ¼mrÃ¼k Vergisi Kalem Rto"]
ZORUNLU_SUTUNLAR_IHRACAT = ["VarÄ±ÅŸ Ãœlkesi"]

UCUNCU_DUNYA_ULKELERI = [
    "ÃœRDÃœN", "FAREO ADALARI", "GÃœNEY KORE", "MALEZYA", "SÄ°NGAPUR",
    "ABD VÄ°RJÄ°N ADALARI", "AFGANÄ°STAN", "A.B.D.", "AMERÄ°KAN OKYANUSYASI", 
    "ANDORRA", "ANGOLA", "ANGUILLA", "ANTIGUA VE BERMUDA", "ARJANTÄ°N", 
    "ARUBA", "AVUSTRALYA", "AVUSTRALYA OKYANUSU", "AVUSTURYA", 
    "AZERBEYCAN-NAHÃ‡IVAN", "BAHAMA", "BAHREYN", "BANGLADEÅž", "BARBADOS", 
    "BELÄ°ZE", "BENÄ°N", "BERMUDA", "BEYAZ RUSYA", "BHUTAN", 
    "BÄ°RLEÅžÄ°K ARAP EMÄ°RLÄ°KLERÄ°", "BOLÄ°VYA", "BOSTVANA", "BREZÄ°LYA", "BRUNEÄ°",
    "BURKÄ°NA FASO", "BURMA", "BURUNDÄ°", "CAPE VERDE", "CAYMAN ADALARI",
    "CEBELÄ° TARIK", "CEUTA VE MELÄ°LLA", "CEZAYÄ°R", "CÄ°BUTÄ°", "COOK ADALARI",
    "Ã‡AD", "Ã‡EÃ‡EN CUMHURÄ°YETÄ°", "Ã‡Ä°N HALK CUMHURÄ°YETÄ°", "DAÄžISTAN CUMHURÄ°YETÄ°",
    "DOMÄ°NÄ°K CUMHURÄ°YETÄ°", "DOMÄ°NÄ°KA", "DUBAÄ°", "EKVATOR", "EKVATOR GÄ°NESÄ°",
    "EL SALVADOR", "ENDONEZYA", "ERMENÄ°STAN", "ETÄ°YOPYA", "FALKLAND ADALARI",
    "FAROE ADALARI", "FÄ°JÄ°", "FÄ°LDÄ°ÅžÄ° SAHÄ°LÄ°", "FÄ°LÄ°PÄ°NLER", "FRANSIZ GUYANASI",
    "GABON", "GAMBÄ°YA", "GANA", "GÄ°NE", "GÄ°NE-BÄ°SSAU", "GRENADA",
    "GRÃ–NLAND", "GUADELUP", "GUATEMALA", "GUYANA", "GÃœNEY AFRÄ°KA CUMHURÄ°YETÄ°",
    "GÃœNEY YEMEN", "HAÄ°TÄ°", "HÄ°NDÄ°STAN", "HOLLANDA ANTÄ°LLERÄ°", "HONDURAS",
    "HONG KONG", "IRAK", "Ä°NGÄ°LÄ°Z HÄ°NT OKY.TOPRAKLARI", "Ä°NGÄ°LÄ°Z VÄ°RJÄ°N ADALARI",
    "Ä°RAN", "JAMAÄ°KA", "JAPONYA", "KAMBOÃ‡YA", "KAMERUN", "KANADA",
    "KANARYA ADALARI", "KATAR", "KAZAKÄ°STAN", "KENYA", "KIRGIZÄ°STAN",
    "KÄ°RÄ°BATÄ°", "KOLOMBÄ°YA", "KOMORO ADALARI", "KONGO", "KOSTA RÄ°KA",
    "KUVEYT", "KUZEY KIBRIS T.C.", "KUZEY KORE DEMOKRATÄ°K HALK CUM.",
    "KUZEY YEMEN", "KÃœBA", "LAOS", "LESOTHO", "LÄ°BERYA", "LÄ°BYA", "LÃœBNAN",
    "MADAGASKAR", "MAKAO", "MALAVÄ°", "MALDÄ°V ADALARI", "MALÄ°", "MARTÄ°NÄ°K",
    "MAYOTTE", "MEKSÄ°KA", "MERKEZÄ° AFRÄ°KA CUMHURÄ°YETÄ°", "MOÄžOLÄ°STAN", "MONACO",
    "MORÄ°TANYA", "MOZAMBÄ°K", "NAMÄ°BYA", "NAURU", "NEPAL", "NÄ°JER", "NÄ°JERYA",
    "NÄ°KARAGUA", "Ã–ZBEKÄ°STAN", "PAKÄ°STAN", "PANAMA", "PAPUA YENÄ° GÄ°NE",
    "PARAGUAY", "PERU", "PÄ°TCAÄ°RN", "REUNÄ°ON", "RUANDA", "RUM KESÄ°MÄ°",
    "RUSYA FEDERASYONU", "SAO TOME AND PRINCIPE", "SENEGAL",
    "SEYÅžEL ADALARI VE BAÄžLANTILARI", "SIERRA LEONE", "SOLOMON ADALARI",
    "SOMALÄ°", "SRÄ° LANKA", "ST. CHRÄ°STOPHER VE NEVÄ°S", "ST. HELENA VE BAÄžLANTILARI",
    "ST. LUCÄ°A", "ST. PÄ°ERRE VE MÄ°QUELON", "ST. VÄ°NCENT", "SUDAN", "SURÄ°NAM",
    "SUUDÄ° ARABÄ°STAN", "SVAZÄ°LAND", "TACÄ°KÄ°STAN", "TANZANYA", "TATARÄ°STAN",
    "TAYLAND", "TAYVAN", "TOGO", "TONGA", "TRÄ°NÄ°DAD VE TOBAGO",
    "TURKS VE CAÄ°COS ADASI", "TUVALU", "TÃœRKÄ°YE", "TÃœRKMENÄ°STAN", "UGANDA",
    "UKRAYNA", "UMMAN", "URUGUAY", "VANUATU", "VATÄ°KAN", "VENEZUELLA",
    "VÄ°ETNAM", "WALLÄ°S VE FUTUNA ADALARI", "YAKUTÄ°STAN",
    "YENÄ° KALODENYA VE BAÄžLANTILARI", "YENÄ° ZELANDA", "YENÄ° ZELANDA OKYANUSU",
    "YUGOSLAVYA", "ZAÄ°RE", "ZAMBÄ°A", "ZÄ°MBABVE", "HONG-KONG", "Ã‡Ä°N HALK CUMHUR.",
    "BÄ°R.ARAP EMÄ°RLÄ°K.", "GÃœNEY KORE CUM.", "VÄ°ETNAM SOSYALÄ°ST", "KOLOMBÄ°A",
    "GÃœNEY AFRÄ°KA CUM.", "AZERBAYCAN-NAHÃ‡.", "KOSTARÄ°KA"
]

AB_COUNTRIES = [
    "ALMANYA", "AVUSTURYA", "BELÃ‡Ä°KA", "BULGARÄ°STAN", "Ã‡EKYA", "DANÄ°MARKA", "ESTONYA", "FÄ°NLANDÄ°YA",
    "FRANSA", "HÄ°RVATÄ°STAN", "HOLLANDA", "Ä°RLANDA", "Ä°SPANYA", "Ä°SVEC", "Ä°TALYA", "LETONYA", "LÄ°TVANYA",
    "LÃœKSEMBURG", "MACARÄ°STAN", "MALTA", "POLONYA", "PORTEKÄ°Z", "ROMANYA", "SLOVAKYA", "SLOVENYA", "YUNANÄ°STAN",
    "NORVEÃ‡", "Ä°SVÄ°Ã‡RE", "Ä°ZLANDA", "LÄ°HTENÅžTAYN",  "NORVEÃ‡", "Ä°SVÄ°Ã‡RE", "Ä°ZLANDA", "LÄ°HTENÅžTAYN", "ÅžÄ°LÄ°", "FÄ°LÄ°STÄ°N", "SIRBÄ°STAN", "KARADAÄž",
    "GÃœRCÄ°STAN", "ARNAVUTLUK", "BOSNA HERSEK", "Ä°SRAÄ°L", "MAKEDONYA", "GÃœNEY KORE", "MORÄ°TYUS", "MOLDOVA", "FÄ°LÄ°STÄ°N (GAZZE)", "GAZZE"
]

OZEL_ULKELER = [
    "NORVEÃ‡", "Ä°SVÄ°Ã‡RE", "Ä°ZLANDA", "LÄ°HTENÅžTAYN", "ÅžÄ°LÄ°", "FÄ°LÄ°STÄ°N", "SIRBÄ°STAN", "KARADAÄž",
    "GÃœRCÄ°STAN", "ARNAVUTLUK", "BOSNA HERSEK", "Ä°SRAÄ°L", "MAKEDONYA", "GÃœNEY KORE", "MORÄ°TYUS", "MOLDOVA", "FÄ°LÄ°STÄ°N (GAZZE)", "GAZZE"
]


def load_excel(uploaded_file):
    try:
        sheet_data = pd.read_excel(uploaded_file, sheet_name=None)
        for sheet_name, df in sheet_data.items():
            required_columns = []
            if "Ä°th" in sheet_name or "GerÃ§.Ä°th" in sheet_name:
                required_columns = ZORUNLU_SUTUNLAR_ITHALAT
            elif "Ä°hr" in sheet_name or "GerÃ§.Ä°hr" in sheet_name:
                required_columns = ZORUNLU_SUTUNLAR_IHRACAT

            if required_columns:
                df.columns = df.columns.str.strip()
                if not all(col in df.columns for col in required_columns):
                    st.error(f"'{sheet_name}' sayfasÄ±nda zorunlu sÃ¼tunlardan biri eksik. Gerekli sÃ¼tunlar: {required_columns}")
                    st.stop()
            sheet_data[sheet_name] = df
        return sheet_data
    except Exception as e:
        st.error(f"Excel yÃ¼kleme hatasÄ±: {str(e)}")
        return None


def filter_imports(df):
    columns = [
        'TCGB GÃ¼mrÃ¼k Ä°daresi', 'TCGB Tescil No', 'TCGB Tescil Tarihi',
        'AlÄ±cÄ± / GÃ¶nderici Unvan', 'Kalem No', 'SatÄ±r Kodu', 'Atr', 'E-Atr',
        'Eur1', 'E-Eur1', 'Eur1med', 'E-Eur1med',
        'GTÄ°P Kodu (12 li)', 'GTÄ°P aÃ§Ä±klamasÄ±', 'Madde AdÄ±',
        'TamamlayÄ±cÄ± Ã–lÃ§Ã¼ Birim', 'Miktar', 'BrÃ¼t Kg', 'Net Kg',
        'Ä°statistiki Birim Kodu', 'Ä°statistiki Miktar', 'Ä°statistiki KÄ±ymet ($)',
        'Kalem Rejim Kodu', 'MenÅŸe Ãœlke AdÄ±', 'Sevk Ãœlkesi', 'Ã‡Ä±kÄ±ÅŸ Ãœlkesi',
        'VarÄ±ÅŸ Ãœlkesi', 'Ticaret YapÄ±lan Ãœlke', 'Kap ÃœrÃ¼n Bilgisi',
        'Ã–zel Durum', 'Muafiyet Kodu', 'Fatura Bedeli', 'DÃ¶viz TÃ¼rÃ¼',
        'GÃ¼mrÃ¼k Vergisi Kalem Rto', 'GÃ¼mrÃ¼k Vergisi USD'
    ]
    # string rakam filtrelemesi
    df = df[df['GÃ¼mrÃ¼k Vergisi Kalem Rto'].astype(str).str.replace(',', '').str.replace('.', '').str.isdigit()]
    df = df[df['GÃ¼mrÃ¼k Vergisi Kalem Rto'].astype(float) != 0]
    filtered = df[df['Ã–zel Durum'] == 0]
    available_columns = [col for col in columns if col in df.columns]
    return filtered[available_columns]


def filter_exports(df, ab_countries):
    df_ab = df[df['VarÄ±ÅŸ Ãœlkesi'].isin(ab_countries)]
    df_non_ab = df[~df['VarÄ±ÅŸ Ãœlkesi'].isin(ab_countries)]
    return df_ab, df_non_ab


def get_madde_blok(df: pd.DataFrame, start_idx: int, madde_adi: str):
    blok = []
    for j in range(start_idx, min(start_idx + 4, len(df))):
        row = df.iloc[j]
        param = str(row[COL_PARAM]).lower().strip()
        if ("birim kullanÄ±m miktarÄ±" in param or "fire" in param or ROW_TOPLAM_BIRIM.lower() in param):
            row_copy = row.copy()
            if pd.isna(row_copy[COL_MADDE]) or row_copy[COL_MADDE] == "":
                row_copy[COL_MADDE] = madde_adi
            blok.append(row_copy)
    return blok


def secili_sarfiyat_sayfasi(s1: pd.DataFrame, s2: pd.DataFrame | None):
    # 4. sayfa varsa onu kullan; yoksa 3. sayfa. Eski mantÄ±k s1 Ã¼zerinden yanlÄ±ÅŸ karar veriyordu
    if s2 is not None:
        return s2
    return s1


def parse_birim(param_text: str) -> str:
    m = re.search(r"\((.*?)\)", str(param_text or "").lower())
    return m.group(1).strip() if m else ""


def to_float(v) -> float:
    try:
        return float(v)
    except Exception:
        return 0.0


def hesapla_toplam_mamul(
    tbk: float,  # Toplam Birim KullanÄ±m
    birim_turu: str,
    col: str,
    is_fourth_sheet: bool,
    toplam_miktar_row: dict,
    sarfiyat2: pd.DataFrame | None,
) -> float:
    # Senaryoyu tek yerde uygulamak
    if not is_fourth_sheet:
        # 3 sayfa â†’ her zaman dÃ¼nya toplamÄ±yla Ã§arp
        return tbk * to_float(toplam_miktar_row.get(col, 0))

    # 4 sayfa varsa
    if "kg" in birim_turu or "kilo" in birim_turu:
        # 2.br: sarfiyat2.iloc[1][col]
        katsayi = 0.0
        if sarfiyat2 is not None and 1 < len(sarfiyat2.index) and col in sarfiyat2.columns:
            katsayi = to_float(sarfiyat2.iloc[1][col])
        return tbk * katsayi
    # diÄŸer birimler: dÃ¼nya toplamÄ±yla Ã§arp
    return tbk * to_float(toplam_miktar_row.get(col, 0))


st.set_page_config(page_title="Ä°thalat ve Ä°hracat RaporlarÄ±", page_icon="ðŸ“Š", layout="wide")
st.title("Ä°thalat ve Ä°hracat Verilerini YÃ¼kleyin")
st.markdown("**Ä°thalat ve Ä°hracat verilerinizi yÃ¼kleyin ve istediÄŸiniz raporlarÄ± alÄ±n.**")

uploaded_file = st.file_uploader("Excel DosyasÄ±nÄ± YÃ¼kleyin", type=["xlsx"])

if uploaded_file is not None:
    data = load_excel(uploaded_file)
    if data is None:
        st.stop()

    sheet_names = list(data.keys())
    st.write(f"YÃ¼klenen dosyada ÅŸu sheet'ler var: {', '.join(sheet_names)}")

    options = ['GerÃ§.Ä°th.List.', 'GerÃ§.Ä°hr.List.', 'Sarfiyat']
    selected_option = st.selectbox("Ä°ÅŸlem Yapmak Ä°stediÄŸiniz Veri Tipini SeÃ§in", options)

    if len(sheet_names) >= 3:
        ithalat_df_all = data[sheet_names[0]]
        ihracat_df_all = data[sheet_names[1]]
        sarfiyat1 = data[sheet_names[2]]  # 3. sayfa her zaman var

        sarfiyat2_exists = len(sheet_names) >= 4
        sarfiyat2 = data[sheet_names[3]] if sarfiyat2_exists else None

        ithalat_df = filter_imports(ithalat_df_all)
        ithalat_pivot = (
            ithalat_df.groupby(['SatÄ±r Kodu'])['Ä°statistiki Miktar']
            .sum()
            .reset_index()
            .rename(columns={'Ä°statistiki Miktar': 'Toplam Ä°statistiki Miktar'})
        )

        ab_df, non_ab_df = filter_exports(ihracat_df_all, AB_COUNTRIES)
        ab_pivot = (
            ab_df.groupby('SatÄ±r Kodu')['Ä°statistiki Miktar']
            .sum()
            .reset_index()
            .rename(columns={'Ä°statistiki Miktar': 'Toplam Miktar'})
        )
        non_ab_pivot = (
            non_ab_df.groupby('SatÄ±r Kodu')['Ä°statistiki Miktar']
            .sum()
            .reset_index()
            .rename(columns={'Ä°statistiki Miktar': 'Toplam Miktar'})
        )
        ozel_df = ihracat_df_all[ihracat_df_all['VarÄ±ÅŸ Ãœlkesi'].isin(OZEL_ULKELER)]
        kontrol_df = ozel_df.copy() if not ozel_df.empty else pd.DataFrame()

        # Sarfiyat sayfasÄ± seÃ§imi (neden: 4. sayfa varsa onu kullan)
        sarfiyat_df_all = secili_sarfiyat_sayfasi(sarfiyat1, sarfiyat2)
        st.info("KullanÄ±lan sarfiyat sayfasÄ±: " + (sheet_names[3] if sarfiyat2_exists and sarfiyat_df_all.equals(data[sheet_names[3]]) else sheet_names[2]))

        sarfiyat_df = None
        if sarfiyat_df_all is not None:
            ithalat_kodlari = ithalat_pivot['SatÄ±r Kodu'].astype(str).unique()
            dunya_kodlari = non_ab_pivot['SatÄ±r Kodu'].astype(str).unique()

            satir_maskesi = sarfiyat_df_all[COL_MADDE].astype(str).isin(ithalat_kodlari)
            kolonlar = [COL_MADDE, COL_PARAM] + [col for col in sarfiyat_df_all.columns if str(col) in dunya_kodlari]
            kolonlar = [col for col in kolonlar if col in sarfiyat_df_all.columns]

            sarfiyat_df_filtered = sarfiyat_df_all[satir_maskesi][kolonlar]
            sarfiyat_df = sarfiyat_df_filtered.merge(
                ithalat_pivot, how="left", left_on=COL_MADDE, right_on="SatÄ±r Kodu"
            ).drop(columns=["SatÄ±r Kodu"])
            sarfiyat_df.rename(columns={"Toplam Ä°statistiki Miktar": COL_GERCEK_ITH_MIK}, inplace=True)

        # DÃ¼nya toplam miktar haritasÄ±
        dunya_pivot_dict = dict(zip(non_ab_pivot['SatÄ±r Kodu'].astype(str), non_ab_pivot['Toplam Miktar']))

        # Toplam Miktar satÄ±rÄ±
        toplam_miktar_row = {COL_MADDE: "", COL_PARAM: ROW_TOPLAM_MIKTAR}
        for col in [] if sarfiyat_df is None else sarfiyat_df.columns:
            if col in dunya_pivot_dict:
                toplam_miktar_row[col] = dunya_pivot_dict[col]
            elif col not in [COL_MADDE, COL_PARAM, COL_GERCEK_ITH_MIK]:
                toplam_miktar_row[col] = 0

        if sarfiyat_df is not None:
            sarfiyat_df = pd.concat([pd.DataFrame([toplam_miktar_row]), sarfiyat_df], ignore_index=True)

            # GÃ¶rsel amaÃ§lÄ± baÅŸlÄ±k satÄ±rlarÄ± (neden: kullanÄ±cÄ± gÃ¶rebilsin)
            urun_adi_satiri_3 = sarfiyat1.iloc[3] if len(sarfiyat1.index) > 3 else pd.Series()
            kullanilan_urun_row_3 = {COL_MADDE: "", COL_PARAM: ROW_KULLANILAN_URUN}
            for col in sarfiyat_df.columns:
                if col not in [COL_MADDE, COL_PARAM] and col in urun_adi_satiri_3.index:
                    kullanilan_urun_row_3[col] = urun_adi_satiri_3[col]

            sarfiyat_df = pd.concat([
                sarfiyat_df.iloc[[0]],
                pd.DataFrame([kullanilan_urun_row_3]),
                sarfiyat_df.iloc[1:]
            ], ignore_index=True)

            if sarfiyat2_exists and sarfiyat_df_all.equals(sarfiyat2):
                urun_adi_satiri_4 = sarfiyat2.iloc[1] if len(sarfiyat2.index) > 1 else pd.Series()
                kullanilan_urun_row_4 = {col: "" for col in sarfiyat_df.columns}
                kullanilan_urun_row_4[COL_MADDE] = ROW_2BR_BIRIM
                kullanilan_urun_row_4[COL_PARAM] = ""
                for col in sarfiyat_df.columns:
                    if col not in [COL_MADDE, COL_PARAM] and col in urun_adi_satiri_4.index:
                        kullanilan_urun_row_4[col] = urun_adi_satiri_4[col]
                sarfiyat_df = pd.concat([
                    sarfiyat_df.iloc[[0, 1]],
                    pd.DataFrame([kullanilan_urun_row_4]),
                    sarfiyat_df.iloc[2:]
                ], ignore_index=True)

            # --- Sarfiyat oluÅŸturma Toplam Mamul KullanÄ±mÄ± HesabÄ± oldu artÄ±k :)))))---
            yeni_sarfiyat_df = pd.DataFrame(columns=sarfiyat_df.columns)
            is_fourth = sarfiyat2_exists and sarfiyat_df_all.equals(sarfiyat2)

            i = 0
            while i < len(sarfiyat_df):
                satir = sarfiyat_df.iloc[i]
                yeni_sarfiyat_df.loc[len(yeni_sarfiyat_df)] = satir

                param_text = str(satir[COL_PARAM]).lower()
                if param_text.startswith("birim kullanÄ±m miktarÄ±"):
                    madde_adi = satir[COL_MADDE]
                    birim_turu = parse_birim(satir[COL_PARAM])

                    # (seÃ§ilen sayfa)
                    kaynak_sarfiyat = sarfiyat_df_all
                    match_index = kaynak_sarfiyat[
                        (kaynak_sarfiyat[COL_MADDE] == madde_adi)
                        & (kaynak_sarfiyat[COL_PARAM].astype(str).str.lower().str.contains("birim kullanÄ±m miktarÄ±"))
                    ].index

                    # Fire ve Toplam Birim KullanÄ±m satÄ±rlarÄ±nÄ± ekle
                    fire_row = None
                    toplam_birim_row = None
                    if not match_index.empty:
                        blok_satirlari = get_madde_blok(kaynak_sarfiyat, match_index[0], madde_adi)
                        for r in blok_satirlari[1:]: 
                            # hangi satÄ±r olduÄŸunu algÄ±la :)
                            ptxt = str(r.get(COL_PARAM, "")).strip().lower()
                            yeni_row = {col: r[col] if col in r else "" for col in sarfiyat_df.columns}
                            yeni_sarfiyat_df.loc[len(yeni_sarfiyat_df)] = yeni_row
                            if ptxt.startswith("fire"):
                                fire_row = yeni_row
                            elif ptxt == ROW_TOPLAM_BIRIM.lower():
                                toplam_birim_row = yeni_row

                    # Toplam Mamul KullanÄ±mÄ± satÄ±rÄ±nÄ± hesapla ve ekle
                    mamul_row = {col: "" for col in sarfiyat_df.columns}
                    mamul_row[COL_MADDE] = madde_adi
                    mamul_row[COL_PARAM] = ROW_TOPLAM_MAMUL

                    for col in sarfiyat_df.columns:
                        if col in [COL_MADDE, COL_PARAM, COL_GERCEK_ITH_MIK]:
                            continue
                        tbk = to_float((toplam_birim_row or {}).get(col, satir.get(col))) 
                        mamul_row[col] = hesapla_toplam_mamul(
                            tbk=tbk,
                            birim_turu=birim_turu,
                            col=col,
                            is_fourth_sheet=is_fourth,
                            toplam_miktar_row=toplam_miktar_row,
                            sarfiyat2=sarfiyat2,
                        )

                    yeni_sarfiyat_df.loc[len(yeni_sarfiyat_df)] = mamul_row
                i += 1

            sarfiyat_df = yeni_sarfiyat_df.reset_index(drop=True)

            # TMK toplamÄ±nÄ± hesapla
            mamul_maskesi = sarfiyat_df[COL_PARAM] == ROW_TOPLAM_MAMUL
            def yatay_toplam(row):
                total = 0.0
                for c in sarfiyat_df.columns:
                    if c in [COL_MADDE, COL_PARAM, COL_GERCEK_ITH_MIK, COL_FARK, COL_TEV, COL_TMK_TOPLAM]:
                        continue
                    total += to_float(row.get(c, 0))
                return total

            sarfiyat_df.loc[mamul_maskesi, COL_TMK_TOPLAM] = sarfiyat_df[mamul_maskesi].apply(yatay_toplam, axis=1)

            # GerÃ§ekleÅŸen Ä°thalat MiktarÄ± (maddeye gÃ¶re pivot deÄŸer)
            for idx, row in sarfiyat_df[mamul_maskesi].iterrows():
                madde_adi = row[COL_MADDE]
                ith_row = ithalat_pivot[ithalat_pivot['SatÄ±r Kodu'] == madde_adi]
                sarfiyat_df.loc[idx, COL_GERCEK_ITH_MIK] = (ith_row.iloc[0]['Toplam Ä°statistiki Miktar'] if not ith_row.empty else 0)

            # Fark ve TEV
            sarfiyat_df.loc[mamul_maskesi, COL_FARK] = (
                pd.to_numeric(sarfiyat_df.loc[mamul_maskesi, COL_TMK_TOPLAM], errors='coerce')
                - pd.to_numeric(sarfiyat_df.loc[mamul_maskesi, COL_GERCEK_ITH_MIK], errors='coerce')
            )
            sarfiyat_df.loc[mamul_maskesi, COL_TEV] = sarfiyat_df.loc[mamul_maskesi, COL_FARK].apply(
                lambda x: "TEV Var" if pd.notna(x) and x < 0 else "TEV Yok"
            )

        # GÃ¶rselleÅŸtirme
        if selected_option == 'GerÃ§.Ä°th.List.':
            st.subheader("FiltrelenmiÅŸ Ä°thalat Verileri")
            st.dataframe(ithalat_df)
            st.subheader("Ä°thalat Pivot Tablosu")
            st.dataframe(ithalat_pivot)

        elif selected_option == 'GerÃ§.Ä°hr.List.':
            st.subheader("Vergili Ä°hracat (AB Ãœlkeleri)")
            st.dataframe(ab_df)
            st.subheader("AB Ãœlkeleri Pivot Tablosu")
            st.dataframe(ab_pivot)
            st.subheader("3. DÃ¼nya Ãœlkelerine Ä°hracat")
            st.dataframe(non_ab_df)
            st.subheader("3. DÃ¼nya Ãœlkeleri Pivot Tablosu")
            st.dataframe(non_ab_pivot)

        elif selected_option == 'Sarfiyat':
            if sarfiyat_df is not None:
                st.subheader("FiltrelenmiÅŸ Sarfiyat Verileri")
                st.dataframe(sarfiyat_df)
            else:
                st.warning("Sarfiyat verisi bulunamadÄ±.")

        # Ã‡Ä±ktÄ±
        output_combined = BytesIO()
        with pd.ExcelWriter(output_combined, engine="xlsxwriter") as writer:
            ithalat_df.to_excel(writer, sheet_name="Ä°thalat Verileri", index=False)
            ithalat_pivot.to_excel(writer, sheet_name="Ä°thalat Pivot", index=False)
            ab_df.to_excel(writer, sheet_name="Vergili Ä°hracat", index=False)
            ab_pivot.to_excel(writer, sheet_name="AB Ãœlkeleri Pivot", index=False)
            non_ab_df.to_excel(writer, sheet_name="3. DÃ¼nya Ãœlkeleri", index=False)
            non_ab_pivot.to_excel(writer, sheet_name="3. DÃ¼nya Ãœlkeleri Pivot", index=False)
            if not kontrol_df.empty:
                kontrol_df.to_excel(writer, sheet_name="Kontrol Listesi", index=False)
            if sarfiyat_df is not None:
                sarfiyat_df.to_excel(writer, sheet_name="Sarfiyat", index=False)

        output_combined.seek(0)
        st.download_button(
            "TÃ¼m Verileri Ä°ndir",
            data=output_combined,
            file_name="tum_veriler_raporu.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        )
